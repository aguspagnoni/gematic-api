require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PriceListsController, type: :controller do
  let(:company)    { create(:company) }
  let(:admin_user) { create(:admin_user) }
  # This should return the minimal set of attributes required to create a valid
  # PriceList. As you add validations to PriceList, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { name: 'Super List',
      company_id: company.id,
      expires: Date.tomorrow,
      valid_since: Date.today,
      admin_user_id: admin_user.id
    }
  end

  let(:invalid_attributes) do
    { name: nil, expires: Date.yesterday, valid_since: Date.today }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PriceListsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all price_lists as @price_lists" do
      begin
        price_list = PriceList.create! valid_attributes
      rescue => e
        byebug
      end
      get :index, params: {}, session: valid_session
      expect(assigns(:price_lists)).to eq([price_list])
    end
  end

  describe "GET #show" do
    it "assigns the requested price_list as @price_list" do
      price_list = PriceList.create! valid_attributes
      get :show, params: { id: price_list.to_param }, session: valid_session
      expect(assigns(:price_list)).to eq(price_list)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new PriceList" do
        expect {
          post :create, params: { price_list: valid_attributes }, session: valid_session
        }.to change(PriceList, :count).by(1)
      end

      it "assigns a newly created price_list as @price_list" do
        post :create, params: { price_list: valid_attributes }, session: valid_session
        expect(assigns(:price_list)).to be_a(PriceList)
        expect(assigns(:price_list)).to be_persisted
      end

      it "redirects to the created price_list" do
        post :create, params: { price_list: valid_attributes }, session: valid_session
        expect(response.body).to match(PriceList.last.to_json)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved price_list as @price_list" do
        post :create, params: { price_list: invalid_attributes }, session: valid_session
        expect(assigns(:price_list)).to be_a_new(PriceList)
      end
    end
  end

  describe "PUT #update" do
    context "with invalid params" do
      it "assigns the price_list as @price_list" do
        price_list = PriceList.create! valid_attributes
        put :update, params: { id: price_list.to_param, price_list: invalid_attributes }, session: valid_session
        expect(assigns(:price_list)).to eq(price_list)
      end

      it "re-renders the price_list json" do
        price_list = PriceList.create! valid_attributes
        put :update, params: { id: price_list.to_param, price_list: invalid_attributes }, session: valid_session
        expect(response.body).to include('name').and include('expires')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested price_list" do
      price_list = PriceList.create! valid_attributes
      expect {
        delete :destroy, params: { id: price_list.to_param }, session: valid_session
      }.to change(PriceList, :count).by(-1)
    end

    it "redirects to the price_lists list" do
      price_list = PriceList.create! valid_attributes
      delete :destroy, params: { id: price_list.to_param }, session: valid_session
      expect(response).to have_http_status :no_content
    end
  end
end
