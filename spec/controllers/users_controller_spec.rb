require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do
  let(:user_example) { build(:user) }
  # This should return the minimal set of attributes required to create a valid
  # user. As you add validations to user, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { email: user_example.email, password: user_example.password, company_id: user_example.company.id }
  end

  let(:valid_admin_attributes) do
    { email: 'asd@a.com', password: 'mama' }
  end

  let(:invalid_attributes) do
    { email: 'not_an_email' }
  end

  let(:invalid_attributes_errors) do
    %w(company email password)
  end

  let(:no_session) { {} }
  let(:valid_admin_session) { {} }

  describe 'WHEN **ADMIN** NEEDS AUTHENTICATION' do
    let!(:user)  { User.create! valid_attributes }
    let!(:admin) { AdminUser.create! valid_admin_attributes }

    before do
      add_authentication_header_for(admin)
    end

    describe "GET #index" do
      it "assigns all users as @users" do
        get :index, params: {}
        expect(response).to have_http_status :ok
        expect(assigns(:users)).to eq([user])
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested user" do
        expect {
          delete :destroy, params: { id: user.to_param }
        }.to change(User, :count).by(-1)
      end
    end
  end

  describe 'PUBLIC ENDPOINTS' do
    describe "POST #confirm" do
      let(:user) { User.create! valid_attributes }
      let(:token) { 'token' }
      before do
        allow_any_instance_of(UsersController).to receive(:token_for).and_return(token)
      end

      it 'is publicly reachable' do
        post :confirm
        expect(response).to have_http_status :bad_request
      end

      context "with valid params" do
        it "confirms user given" do
          post :confirm, params: { user: { email: user.email, token: token } }
          expect {
            user.reload
          }.to change(user, :status).from('not_confirmed').to('confirmed')
        end
      end

      context "with valid params" do
        let(:invalid_token) { 'invalid_token' }
        before do
          post :confirm, params: { user: { email: user.email, token: invalid_token } }
        end

        it 'does not give away information about the user' do
          expect(response).to have_http_status :not_found
        end

        it "does not confirm user" do
          expect {
            user.reload
          }.not_to change(user, :status)
        end
      end
    end


    describe "POST #create" do
      context "with valid params" do
        it "creates a new user" do
          expect {
            post :create, params: { user: valid_attributes }
          }.to change(User, :count).by(1)
        end

        it "assigns a newly created user as @user" do
          post :create, params: { user: valid_attributes }
          expect(assigns(:user)).to be_a(User)
          expect(assigns(:user)).to be_persisted
          expect(assigns(:user).confirmed?).to be false
          expect(response).to have_http_status :created
        end

        it "redirects to a confirmation link" do
          expect {
            post :create, params: { user: valid_attributes }
          }.to have_enqueued_job(ActionMailer::DeliveryJob)
        end
      end

      context "with invalid params" do
        it "specifies invalid attributes errors" do
          post :create, params: { user: invalid_attributes }
          expect(json_response.keys).to match invalid_attributes_errors
        end
      end
    end
  end

  describe 'WHEN **USER** NEEDS AUTHENTICATION' do
    let(:user) { User.create! valid_attributes }
    before do
      add_authentication_header_for(user)
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          { name: 'new name' }
        }

        it "updates the requested user" do
          put :update, params: { id: user.to_param, user: new_attributes }
          user.reload
          expect(user.name).to eq new_attributes[:name]
        end

        it "assigns the requested user as @user" do
          put :update, params: { id: user.to_param, user: new_attributes }
          expect(assigns(:user)).to eq(user)
        end
      end

      context "with invalid params" do
        it "assigns the user as @user" do
          put :update, params: { id: user.to_param, user: invalid_attributes }
          expect(assigns(:user)).to eq(user)
        end
      end
    end

    describe "GET #show" do
      it "assigns the requested user as @user" do
        get :show, params: { id: user.to_param }
        expect(assigns(:user)).to eq(user)
      end
    end
  end
end
